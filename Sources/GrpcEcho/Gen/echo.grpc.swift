//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


#if compiler(>=5.5) && canImport(_Concurrency)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
internal protocol Echo_EchoAsyncProvider: CallHandlerProvider {
  var interceptors: Echo_EchoServerInterceptorFactoryProtocol? { get }

  @Sendable func greeting(
    request: Echo_GreetingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Echo_GreetingResponse

  @Sendable func hello(
    request: Echo_HelloRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Echo_HelloResponse
}

@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension Echo_EchoAsyncProvider {
  internal var serviceName: Substring {
    return "echo.Echo"
  }

  internal var interceptors: Echo_EchoServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Greeting":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Echo_GreetingRequest>(),
        responseSerializer: ProtobufSerializer<Echo_GreetingResponse>(),
        interceptors: self.interceptors?.makeGreetingInterceptors() ?? [],
        wrapping: self.greeting(request:context:)
      )

    case "Hello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Echo_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Echo_HelloResponse>(),
        interceptors: self.interceptors?.makeHelloInterceptors() ?? [],
        wrapping: self.hello(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)

internal protocol Echo_EchoServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'greeting'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGreetingInterceptors() -> [ServerInterceptor<Echo_GreetingRequest, Echo_GreetingResponse>]

  /// - Returns: Interceptors to use when handling 'hello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHelloInterceptors() -> [ServerInterceptor<Echo_HelloRequest, Echo_HelloResponse>]
}
